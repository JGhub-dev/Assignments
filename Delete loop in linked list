class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def removeLoop(head):
    if not head or not head.next:
        return True  # No loop possible

    slow = head
    fast = head

 
    loop_found = False
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            loop_found = True
            break

    if not loop_found:
        return True  # No loop present

    
    slow = head
    while slow != fast:
        slow = slow.next
        fast = fast.next

    
    ptr = slow
    while ptr.next != slow:
        ptr = ptr.next
    ptr.next = None

    return True


def createLinkedList(arr, pos):
    if not arr:
        return None
    head = Node(arr[0])
    curr = head
    loop_node = None

    for i in range(1, len(arr)):
        curr.next = Node(arr[i])
        curr = curr.next
        if i == pos - 1:
            loop_node = curr

    if pos != 0:
        curr.next = loop_node

    return head


def isLoopPresent(head):
    slow = head
    fast = head
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return True
    return False


arr = [1, 3, 4]
pos = 2
head = createLinkedList(arr, pos)
print("Loop before removal:", isLoopPresent(head))  # True if loop exists

result = removeLoop(head)
print("Result after removal:", result)
print("Loop after removal:", isLoopPresent(head))  # Should be False now


def printList(head):
    curr = head
    while curr:
        print(curr.data, end='->' if curr.next else '')
        curr = curr.next
    print()

printList(head)  # Should print linear linked list without loop
